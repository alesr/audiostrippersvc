name: Deploy and Execute Go Binary on EC2

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Go environment
      uses: actions/setup-go@v2
      with:
        go-version: 1.21

    - name: Get commit hash
      id: get_commit_hash
      run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

    - name: Build Go binary with version
      run: go build -ldflags "-X main.buildvcs=${{ steps.get_commit_hash.outputs.hash }}" -o audiostripper cmd/audiostripper/main.go

    - name: Deploy and execute on EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        echo "Checking if ffmpeg is installed..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "which ffmpeg || sudo apt-get update && sudo apt-get install -y ffmpeg"

        echo "Ensuring directory exists..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "sudo mkdir -p /opt/audiostripper && sudo chown $USER:$USER /opt/audiostripper"
        echo "Removing previous binary..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "rm -f /opt/audiostripper/audiostripper"
        echo "Copying new binary..."
        scp -i private_key.pem -o StrictHostKeyChecking=no ./audiostripper $USER@$HOST:/opt/audiostripper/audiostripper
        echo "Executing the binary inside a screen session..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "screen -S audiostripper -dm /opt/audiostripper/audiostripper"
