name: CI and Deployment Workflow
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21'

    - name: Cache Go Modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Static Analysis - fmt
      run: gofmt -s -d .

    - name: Static Analysis - vet
      run: go vet -c=10 -json ./...

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21'

    - name: Cache Go Modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run Unit Tests
      run: go test -v -count=1 -timeout 60s -race -cover ./...

  build:
    name: Build Binary
    needs: [static-analysis, unit-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Go environment
      uses: actions/setup-go@v2
      with:
        go-version: 1.21

    - name: Cache Go Modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get commit hash
      id: get_commit_hash
      run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

    - name: Build Go binary with version
      run: go build -ldflags "-X main.commitHash=${{ steps.get_commit_hash.outputs.hash }}" -o audiostripper cmd/audiostripper/main.go

  deploy:
    name: Deploy on EC2
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy and execute on EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
  
          echo "Ensuring directory exists..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "sudo mkdir -p /opt/audiostripper && sudo chown $USER:$USER /opt/audiostripper"
          
          echo "Removing previous binary..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "rm -f /opt/audiostripper/audiostripper"
  
          echo "Copying new binary..."
          scp -i private_key.pem -o StrictHostKeyChecking=no ./audiostripper $USER@$HOST:/opt/audiostripper/audiostripper
  
          echo "Executing the binary inside a screen session..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "screen -S audiostripper -dm /opt/audiostripper/audiostripper"

  install-ffmpeg:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Setup SSH and access EC2
        run: echo "$PRIVATE_KEY" > private_key.pem

      - name: Install FFmpeg
        run: |
          echo "Installing FFMPEG..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "which ffmpeg || (wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-i686-static.tar.xz && tar -xf ffmpeg-release-i686-static.tar.xz && sudo mv ffmpeg-*/ffmpeg /usr/local/bin/)"
