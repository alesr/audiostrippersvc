// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/proto/audiostripper/v1/audiostripper.proto

package proto_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AudioStripperClient is the client API for AudioStripper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioStripperClient interface {
	ExtractAudio(ctx context.Context, opts ...grpc.CallOption) (AudioStripper_ExtractAudioClient, error)
}

type audioStripperClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioStripperClient(cc grpc.ClientConnInterface) AudioStripperClient {
	return &audioStripperClient{cc}
}

func (c *audioStripperClient) ExtractAudio(ctx context.Context, opts ...grpc.CallOption) (AudioStripper_ExtractAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioStripper_ServiceDesc.Streams[0], "/AudioStripper/ExtractAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioStripperExtractAudioClient{stream}
	return x, nil
}

type AudioStripper_ExtractAudioClient interface {
	Send(*VideoData) error
	Recv() (*AudioData, error)
	grpc.ClientStream
}

type audioStripperExtractAudioClient struct {
	grpc.ClientStream
}

func (x *audioStripperExtractAudioClient) Send(m *VideoData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioStripperExtractAudioClient) Recv() (*AudioData, error) {
	m := new(AudioData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioStripperServer is the server API for AudioStripper service.
// All implementations must embed UnimplementedAudioStripperServer
// for forward compatibility
type AudioStripperServer interface {
	ExtractAudio(AudioStripper_ExtractAudioServer) error
	mustEmbedUnimplementedAudioStripperServer()
}

// UnimplementedAudioStripperServer must be embedded to have forward compatible implementations.
type UnimplementedAudioStripperServer struct {
}

func (UnimplementedAudioStripperServer) ExtractAudio(AudioStripper_ExtractAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method ExtractAudio not implemented")
}
func (UnimplementedAudioStripperServer) mustEmbedUnimplementedAudioStripperServer() {}

// UnsafeAudioStripperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioStripperServer will
// result in compilation errors.
type UnsafeAudioStripperServer interface {
	mustEmbedUnimplementedAudioStripperServer()
}

func RegisterAudioStripperServer(s grpc.ServiceRegistrar, srv AudioStripperServer) {
	s.RegisterService(&AudioStripper_ServiceDesc, srv)
}

func _AudioStripper_ExtractAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioStripperServer).ExtractAudio(&audioStripperExtractAudioServer{stream})
}

type AudioStripper_ExtractAudioServer interface {
	Send(*AudioData) error
	Recv() (*VideoData, error)
	grpc.ServerStream
}

type audioStripperExtractAudioServer struct {
	grpc.ServerStream
}

func (x *audioStripperExtractAudioServer) Send(m *AudioData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioStripperExtractAudioServer) Recv() (*VideoData, error) {
	m := new(VideoData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioStripper_ServiceDesc is the grpc.ServiceDesc for AudioStripper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioStripper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AudioStripper",
	HandlerType: (*AudioStripperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExtractAudio",
			Handler:       _AudioStripper_ExtractAudio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/audiostripper/v1/audiostripper.proto",
}
